<!DOCTYPE html><html lang="en" dir="ltr"><head>
    <title>Firebase</title>
    <meta name="robots" content="noindex">
    <meta charset="utf-8">
    <meta content="IE=Edge" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="iframe" content="framebox">
    
      <meta name="enable_widgets" content="true">
    
    
      <link rel="stylesheet" href="css/css_17.css">
      <link rel="stylesheet" href="css/css_16.css">
      <link rel="stylesheet" href="css/app_2.css">
      
    
    <script nonce="0JUYbdt/IoqIJZ7q1wPst+kjgnCnDK">
      (function(){
        window.framebox=window.framebox||function(){(window.framebox.q=window.framebox.q||[]).push(arguments)};
        
        var a={},b=function(){(window.framebox.dq=window.framebox.dq||[]).push(arguments)};
        ['getUrl','handleLinkClicksInParent','initAutoSize','navigate','pushState','replaceState',
         'requestQueryAndFragment','sendEvent','updateSize'].forEach(function(x){a[x]=function(){
          b(x,arguments)}});
        window.devsite={framebox:{AutoSizeClient:a}};
      })();
      
      (function(d,e,v,s,i,t,E){d['GoogleDevelopersObject']=i;
        t=e.createElement(v);t.async=1;t.src=s;E=e.getElementsByTagName(v)[0];
        E.parentNode.insertBefore(t,E);})(window, document, 'script',
        'https://www.gstatic.com/devrel-devsite/prod/vee468f4e10aa470182a016132769d1277f3b792f56b19f433715afc734e9c71d/firebase/js/app_loader.js', '[4,"en",null,"/js/devsite_app_module.js","https://www.gstatic.com/devrel-devsite/prod/vee468f4e10aa470182a016132769d1277f3b792f56b19f433715afc734e9c71d","https://www.gstatic.com/devrel-devsite/prod/vee468f4e10aa470182a016132769d1277f3b792f56b19f433715afc734e9c71d/firebase","https://firebase-dot-devsite-v2-prod.appspot.com",1,1,null,1,null,[1,6,8,12,14,17,18,21,25,40,50,63,70,75,76,80,87,91,92,93,97,98,100,101,102,103,104,105,107,108,109,110,111,112,113,115,116,117,118,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,140,141,144,147,148,149,150,151,152,154,155,156,157,159,161,163,164,165,168,169,170,173,179,182,186,191],"AIzaSyAP-jjEJBzmIyKR4F-3XITp8yM9T1gEEI8","AIzaSyB6xiKGDR5O3Ak2okS4rLkauxGUG7XP0hg","firebase.google.com","AIzaSyAQk0fBONSGUqCNznf6Krs82Ap1-NV6J4o","AIzaSyCCxcqdrZ_7QMeLCRY20bh_SXdAYqy70KY"]')
      
      </script>
    
  </head>
  
  <body style="height: auto; overflow: hidden; padding: 20px;">
    <meta name="auto_height" content="true"><meta name="auto_width" content="true"><meta name="enable_widgets" content="true">
  <div class="firesite-code-picker code-picker">


  <link rel="stylesheet" href="css/code-picker.css">
  <script src="js/prettify_compiled.js"></script>


<div class="code-picker__sample-menu--mobile-wrapper">
  <select id="firesite-samples-select" class="code-picker__sample-menu--mobile">
    <option selected="">Authenticate a new user</option>
    <option>Read / write in realtime</option>
    <option>Subscribe a user to a notification topic</option>
    <option>Log a custom Analytics event</option>
    <option>Save an image to Cloud Storage</option>
  </select>
</div>
<div class="code-picker__wrapper">
  <div class="code-picker__sample-menu">
    <ul id="firesite-samples-list" class="code-picker__sample-menu--desktop">
      <li class="code-picker__samples-option empty">
        <span class="code-picker__samples-option__title empty"> </span>
      </li><li data-index="0" class="code-picker__samples-option selected gc-analytics-event" data-category="documentation" data-action="changeSample" data-label="authenticate-a-new-user">
        <span class="code-picker__samples-option__title">Authenticate a new user</span>
      </li>
      <li data-index="1" class="code-picker__samples-option  gc-analytics-event" data-category="documentation" data-action="changeSample" data-label="read-write-in-realtime">
        <span class="code-picker__samples-option__title">Read / write in realtime</span>
      </li>
      <li data-index="2" class="code-picker__samples-option  gc-analytics-event" data-category="documentation" data-action="changeSample" data-label="subscribe-a-user-to-a-notification-topic">
        <span class="code-picker__samples-option__title">Subscribe a user to a notification topic</span>
      </li>
      <li data-index="3" class="code-picker__samples-option  gc-analytics-event" data-category="documentation" data-action="changeSample" data-label="log-a-custom-analytics-event">
        <span class="code-picker__samples-option__title">Log a custom Analytics event</span>
      </li>
      <li data-index="4" class="code-picker__samples-option  gc-analytics-event" data-category="documentation" data-action="changeSample" data-label="save-an-image-to-cloud-storage">
        <span class="code-picker__samples-option__title">Save an image to Cloud Storage</span>
      </li>
    </ul>
  </div>
  <div class="code-picker__samples">
    <div data-index="0" class="code-picker__sample active">
      <div class="code-picker__language-tabs" role="tablist" aria-label="languages">
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="0-swift-panel" aria-label="" tab-label="" id="0-swift-tab">
            Swift
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="0-objective-c-panel" aria-label="" tab-label="" id="0-objective-c-tab">
            Objective-C
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="0-java-panel" aria-label="Android" tab-label="Android" id="0-java-tab">
            Java
            <span class="code-picker__subtitle" id="0-java-tab" aria-controls="0-java-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="0-kotlin-panel" aria-label="Android" tab-label="Android" id="0-kotlin-tab">
            Kotlin+KTX
            <span class="code-picker__subtitle" id="0-kotlin-tab" aria-controls="0-kotlin-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="0-javascript-panel" aria-label="" tab-label="" id="0-javascript-tab">
            JavaScript
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="0-cplusplus-panel" aria-label="" tab-label="" id="0-cplusplus-tab">
            C++
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="0-unity-panel" aria-label="" tab-label="" id="0-unity-tab">
            Unity
          </button>
      </div>
      <section class="code-picker__sample__code" aria-labelledby="0-swift-tab" id="0-swift-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Auth.auth().addStateDidChangeListener { (auth, user) in
  if let user = user {
    let email = user.email
    // ...
  }
}
Auth.auth().signIn(withEmail: userEmail, password: password) { (user, error) in
  if let user = user {
    // ...
  }
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-objective-c-tab" id="0-objective-c-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">[[FIRAuth auth] addAuthStateDidChangeListener:^(FIRAuth * _Nonnull auth,
                                                FIRUser * _Nullable user) {
  if (user) {
    NSString *email = user.email;
    // ...
  }
}];
[[FIRAuth auth] signInWithEmail:email
                        password:password
                      completion:^(FIRUser * _Nullable user,
                                  NSError * _Nullable error) {
  if (error) {
    // ...
  }
}];
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-java-tab" id="0-java-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseAuth auth = FirebaseAuth.getInstance();
auth.signInWithEmailAndPassword(email, password)
    .addOnCompleteListener(new OnCompleteListener() {
        @Override
        public void onComplete(Task task) {
            if (task.isSuccessful()) {
                FirebaseUser user = task.getResult().getUser();
                String email = user.getEmail();
                // ...
            }
        }
    });
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-kotlin-tab" id="0-kotlin-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">val auth = Firebase.auth;
auth.signInWithEmailAndPassword(email, password)
    .addOnCompleteListener(this) { task -&gt;
        if (task.isSuccessful) {
            val user = task.result.user
            // ...
        }
    }
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-javascript-tab" id="0-javascript-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">firebase.auth().onAuthStateChanged(function(user) {
    if (user) {
        // User is signed in
        var email = user.email;
        // ...
    } else {
        // User is not signed in
        // ...
    }
});
firebase.auth().signInWithEmailAndPassword(email, password);
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-cplusplus-tab" id="0-cplusplus-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">firebase::auth::Auth *auth = firebase::auth::Auth::GetAuth(app);
auth-&gt;SignInWithEmailAndPassword(email, password);

// poll the result in your game loop
firebase::Future&lt;firebase::auth::User *&gt; result =
    auth-&gt;SignInWithEmailAndPasswordLastResult();

if (result.status() == firebase::kFutureStatusComplete) {
    if (result.error() == firebase::auth::kAuthErrorNone) {
        firebase::auth::User *user = *result.result();
        std::cout &lt;&lt; Sign in succeeded for email &lt;&lt; user-&gt;email() &lt;&lt; std::endl;
    }
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="0-unity-tab" id="0-unity-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Firebase.Auth.FirebaseAuth auth = Firebase.Auth.FirebaseAuth.DefaultInstance;
auth.SignInWithEmailAndPasswordAsync(email, password).ContinueWithOnMainThread(task =&gt; {
  if (!(task.IsCanceled || task.IsFaulted)) {
    Firebase.Auth.FirebaseUser newUser = task.Result;
    Debug.LogFormat("User signed in successfully: {0} ({1})",
        newUser.DisplayName, newUser.UserId);
  }
});
</pre>
      </section>
    </div>
    <div data-index="1" class="code-picker__sample ">
      <div class="code-picker__language-tabs" role="tablist" aria-label="languages">
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="1-swift-panel" aria-label="" tab-label="" id="1-swift-tab">
            Swift
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="1-objective-c-panel" aria-label="" tab-label="" id="1-objective-c-tab">
            Objective-C
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="1-java-panel" aria-label="Android" tab-label="Android" id="1-java-tab">
            Java
            <span class="code-picker__subtitle" id="1-java-tab" aria-controls="1-java-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="1-kotlin-panel" aria-label="Android" tab-label="Android" id="1-kotlin-tab">
            Kotlin+KTX
            <span class="code-picker__subtitle" id="1-kotlin-tab" aria-controls="1-kotlin-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="1-javascript-panel" aria-label="" tab-label="" id="1-javascript-tab">
            JavaScript
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="1-cplusplus-panel" aria-label="" tab-label="" id="1-cplusplus-tab">
            C++
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="1-unity-panel" aria-label="" tab-label="" id="1-unity-tab">
            Unity
          </button>
      </div>
      <section class="code-picker__sample__code" aria-labelledby="1-swift-tab" id="1-swift-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">let ref = Database.database().reference()
// Write
ref.child("users/(userId)").setValue(user)
// Read / listen
ref.child("users").observe(.value) { snapshot in
  let dict = snapshot.value as? [String : AnyObject] ?? [:]
  // ...
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-objective-c-tab" id="1-objective-c-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FIRDatabaseReference *ref = [[FIRDatabase database] reference];
// write
[[[ref child:@"users"] child:userId] setValue:user];

// read / listen
[[ref child:@"users"] observeEventType:FIRDataEventTypeValue
                              withBlock:^(FIRDataSnapshot * _Nonnull snapshot) {
                                  NSDictionary *dict = snapshot.value;
                                  // ...
                              }];
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-java-tab" id="1-java-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseDatabase database = FirebaseDatabase.getInstance()
// write
database.child("users").child("userId").setValue(user);

// read / listen
database.child("users").addValueEventListener(new ValueEventListener() {
    @Override
    public void onDataChange(DataSnapshot dataSnapshot) {
        // ...
    }

    @Override
    public void onCancelled(DatabaseError databaseError) {}
});
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-kotlin-tab" id="1-kotlin-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">val database = Firebase.database
// write
database.child("users").child("users").setValue(user);

// read / listen
database.child("users").addValueEventListener(object : ValueEventListener {
    override fun onDataChange(dataSnapshot: DataSnapshot) {
        // ...
    }

    override fun onCancelled(databaseError: DatabaseError) {}
});
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-javascript-tab" id="1-javascript-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">var database = firebase.database();
// write
database.ref('users/' + userId).set(user);

// read / listen
database.child("users").on('value', function(snapshot) {
  // ...
});
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-cplusplus-tab" id="1-cplusplus-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">// value database callback implementation
class MyDatabaseValueListener: public firebase::database::ValueListener {
    virtual void OnValueChanged(const firebase::database::DataSnapshot&amp; snapshot) override  {
    }
    virtual void OnCancelled(const firebase::database::Error&amp; error, const char* error_message) override {
    }
};

// implementation
firebase::database::Database* db = firebase::database::Database::GetInstance(app);

// write
db-&gt;GetReference("users").Child("userId").SetValue(user-&gt;uid());

// read / listen
firebase::database::ValueListener* listener = new MyDatabaseValueListener();  // inherits from ValueListener db-&gt;GetReference("users").AddValueListener(listener);
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="1-unity-tab" id="1-unity-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseDatabase database = FirebaseDatabase.DefaultInstance;
// write
database.RootReference.Child("users").Child(userId).Child("username").SetValueAsync(name);

// read / listen
database.GetReference("users").ValueChanged += HandleValueChanged;

void HandleValueChanged(object sender, ValueChangedEventArgs args) {
    if (args.DatabaseError == null) {
        // Do something with the data in args.Snapshot...
    }
}
</pre>
      </section>
    </div>
    <div data-index="2" class="code-picker__sample ">
      <div class="code-picker__language-tabs" role="tablist" aria-label="languages">
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-swift-panel" aria-label="" tab-label="" id="2-swift-tab">
            Swift
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-objective-c-panel" aria-label="" tab-label="" id="2-objective-c-tab">
            Objective-C
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-java-panel" aria-label="" tab-label="" id="2-java-tab">
            Java
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-kotlin-panel" aria-label="" tab-label="" id="2-kotlin-tab">
            Kotlin+KTX
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-cplusplus-panel" aria-label="" tab-label="" id="2-cplusplus-tab">
            C++
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="2-unity-panel" aria-label="" tab-label="" id="2-unity-tab">
            Unity
          </button>
      </div>
      <section class="code-picker__sample__code" aria-labelledby="2-swift-tab" id="2-swift-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Messaging.messaging().subscribe(toTopic: "/topics/news")
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="2-objective-c-tab" id="2-objective-c-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">[[FIRMessaging messaging] subscribeToTopic:@"/topics/news"];
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="2-java-tab" id="2-java-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseMessaging.getInstance().subscribeToTopic("news");
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="2-kotlin-tab" id="2-kotlin-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Firebase.messaging.subscribeToTopic("news");
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="2-cplusplus-tab" id="2-cplusplus-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">firebase::messaging::Subscribe("news");
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="2-unity-tab" id="2-unity-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Firebase.Messaging.FirebaseMessaging.Subscribe("news");
</pre>
      </section>
    </div>
    <div data-index="3" class="code-picker__sample ">
      <div class="code-picker__language-tabs" role="tablist" aria-label="languages">
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="3-swift-panel" aria-label="" tab-label="" id="3-swift-tab">
            Swift
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="3-objective-c-panel" aria-label="" tab-label="" id="3-objective-c-tab">
            Objective-C
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="3-java-panel" aria-label="Android" tab-label="Android" id="3-java-tab">
            Java
            <span class="code-picker__subtitle" id="3-java-tab" aria-controls="3-java-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="3-kotlin-panel" aria-label="Android" tab-label="Android" id="3-kotlin-tab">
            Kotlin+KTX
            <span class="code-picker__subtitle" id="3-kotlin-tab" aria-controls="3-kotlin-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="3-cplusplus-panel" aria-label="" tab-label="" id="3-cplusplus-tab">
            C++
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="3-unity-panel" aria-label="" tab-label="" id="3-unity-tab">
            Unity
          </button>
      </div>
      <section class="code-picker__sample__code" aria-labelledby="3-swift-tab" id="3-swift-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Analytics.logEvent("share_image", parameters: ["id" : "image123"])
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="3-objective-c-tab" id="3-objective-c-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">[FIRAnalytics logEventWithName:@"share_image"
                    parameters:@{@"id": "image123"}];
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="3-java-tab" id="3-java-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Bundle params = new Bundle();
params.putString("id", "image123");

FirebaseAnalytics.getInstance(this).logEvent("share_image", params);
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="3-kotlin-tab" id="3-kotlin-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Firebase.analytics.logEvent("share_image") {
  param("id", "image123")
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="3-cplusplus-tab" id="3-cplusplus-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">const firebase::analytics::Parameter kParams[] = { firebase::analytics::Parameter("id", "image123") };
firebase::analytics::LogEvent("share_image", kParams, sizeof(kParams) / sizeof(kParams[0]));
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="3-unity-tab" id="3-unity-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">Firebase.Analytics.FirebaseAnalytics.LogEvent("share_image", "id", "image123");
</pre>
      </section>
    </div>
    <div data-index="4" class="code-picker__sample ">
      <div class="code-picker__language-tabs" role="tablist" aria-label="languages">
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="4-swift-panel" aria-label="" tab-label="" id="4-swift-tab">
            Swift
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="4-objective-c-panel" aria-label="" tab-label="" id="4-objective-c-tab">
            Objective-C
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="4-java-panel" aria-label="Android" tab-label="Android" id="4-java-tab">
            Java
            <span class="code-picker__subtitle" id="4-java-tab" aria-controls="4-java-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab two-line" role="tab" aria-selected="false" aria-controls="4-kotlin-panel" aria-label="Android" tab-label="Android" id="4-kotlin-tab">
            Kotlin+KTX
            <span class="code-picker__subtitle" id="4-kotlin-tab" aria-controls="4-kotlin-panel">
              <br>
              Android
            </span>
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="4-javascript-panel" aria-label="" tab-label="" id="4-javascript-tab">
            JavaScript
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="4-cplusplus-panel" aria-label="" tab-label="" id="4-cplusplus-tab">
            C++
          </button>
          <button class="code-picker__language-tabs__tab " role="tab" aria-selected="false" aria-controls="4-unity-panel" aria-label="" tab-label="" id="4-unity-tab">
            Unity
          </button>
      </div>
      <section class="code-picker__sample__code" aria-labelledby="4-swift-tab" id="4-swift-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">let storageRef = Storage.storage().reference()
let riversRef = storageRef.child("image/rivers.jpg")
let uploadTask = riversRef.putData(data, metadata: nil) { (metadata, error) in
  guard let metadata = metadata else { return }
  // ...
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-objective-c-tab" id="4-objective-c-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FIRStorage *storage = [FIRStorage storage];

FIRStorageReference *riversRef = [storageRef child:@"images/rivers.jpg"];
FIRStorageUploadTask *uploadTask = [riversRef putData:data
                                              metadata:nil
                                            completion:^(FIRStorageMetadata *metadata,
                                                        NSError *error) {
  if (error != nil) {
    // ...
  } else {
    // ...
  }
}];
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-java-tab" id="4-java-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseStorage storage = FirebaseStorage.getInstance();

storage.child("images/rivers.jpg").putBytes(data)
    .addOnFailureListener(new OnFailureListener() {
        @Override
        public void onFailure(@NonNull Exception exception) {
            // ...
        }
    }).addOnSuccessListener(new OnSuccessListener&lt;UploadTask.TaskSnapshot&gt;() {
        @Override
        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
            // ...
        }
    });
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-kotlin-tab" id="4-kotlin-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">val storage = Firebase.storage

storage.child("images/rivers.jpg").putBytes(data)
    .addOnFailureListener {
      // ...
    }.addOnSuccessListener { taskSnapshot -&gt;
      // taskSnapshot.metadata contains file metadata such as size, content-type, etc.
      // ...
    };
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-javascript-tab" id="4-javascript-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">var storageRef = firebase.storage().ref();

storageRef.child("images/rivers.jpg").put(data).then(function(snapshot) {
  // ...
});
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-cplusplus-tab" id="4-cplusplus-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">firebase::storage::Storage* storage = firebase::storage::Storage::GetInstance(app);
firebase::storage::StorageReference ref = storage-&gt;GetReference("images/rivers.jpg");
firebase::Future&lt;firebase::storage::Metadata&gt; result = ref.PutBytes(data, data_size, nullptr, nullptr);
// ...
if (result.Status() == firebase::kFutureStatusComplete) {
  if (result.Error() == firebase::storage::kErrorNone) {
    // ...
  }
}
</pre>
      </section>
      <section class="code-picker__sample__code" aria-labelledby="4-unity-tab" id="4-unity-panel" tabindex="0" role="tabpanel" hidden="&quot;hidden&quot;">
        <pre class="prettyprint">FirebaseStorage storage = FirebaseStorage.DefaultInstance;
StorageReference riversRef = storage.GetReference("images/rivers.jpg");
riversRef.PutBytesAsync(customBytes).ContinueWithOnMainThread(task =&gt; {
    if (!(task.IsCanceled || task.IsFaulted)) {
        // Metadata contains file metadata such as size, content-type, and etc.
        StorageMetadata metadata = task.Result;
        // ...
    }
});
</pre>
      </section>
    </div>
  </div>
</div>

<script>
/**
 * Code sample picker
 */
(function() {
  /* Classnames */
  const CLASS_SELECTED = 'selected';
  const CLASS_OPTION = 'code-picker__samples-option';
  const CLASS_OPTION_TITLE = 'code-picker__samples-option__title';

  /* Elements */
  var desktopSampleMenu = document.querySelector(
    '.code-picker__sample-menu--desktop'
  );
  var mobileSampleMenu = document.querySelector(
    '.code-picker__sample-menu--mobile'
  );
  var options = castToArray(document.querySelectorAll('.' + CLASS_OPTION));
  var codeSamples = castToArray(
    document.querySelectorAll('.code-picker__sample')
  );
  var selectedOption = document.querySelector(
    '.' + CLASS_OPTION + '.' + CLASS_SELECTED
  );
  var selectedIndex = selectedOption.getAttribute('data-index');
  var kdMenuElements;

  /* language tabs */
  const tabs = document.querySelectorAll('[role="tab"]');
  const panels = document.querySelectorAll('[role="tabpanel"]');

  /* key direction reference */
  const keys = {
    end: 35,
    home: 36,
    left: 37,
    right: 39,
  };

  // Add or substract depending on key pressed
  const direction = {
    37: -1,
    38: -1,
    39: 1,
    40: 1,
  };

  /* Init mobile event listeners */
  mobileSampleMenu.addEventListener('change', function(event) {
    selectedIndex = mobileSampleMenu.selectedIndex;

    // Update mobile menu
    options.forEach(function(option, i) {
      toggleClass(option, CLASS_SELECTED, i === selectedIndex);
      selectedOption = i === selectedIndex ? option : selectedOption;
    });

    updateActiveCodeSample();
  });

  /* Init desktop event listeners */
  desktopSampleMenu.addEventListener('click', function(event) {
    var option = event.target;
    var clickedOnOption =
      !option.classList.contains(CLASS_OPTION) &&
      !option.classList.contains(CLASS_OPTION_TITLE);

    if (clickedOnOption || option.classList.contains('empty')) {
      return;
    } else if (option.classList.contains(CLASS_OPTION_TITLE)) {
      option = event.target.parentElement;
    }

    // Update selected menu item
    selectedOption.classList.remove(CLASS_SELECTED);
    option.classList.add(CLASS_SELECTED);
    selectedOption = option;
    selectedIndex = parseInt(option.dataset.index);

    // Update code sample
    updateActiveCodeSample();

    // Update the mobile select
    if (kdMenuElements === undefined) {
      kdMenuElements = castToArray(
        document.querySelectorAll('ul.kd-menulist>li')
      );
    }
    kdMenuElements[selectedIndex] && kdMenuElements[selectedIndex].click();
  });

  /* Helpers */
  function castToArray(elements) {
    return Array.prototype.slice.call(elements);
  }

  function toggleClass(element, className, toggle) {
    if (toggle) {
      element.classList.add(className);
    } else {
      element.classList.remove(className);
    }
  }

  function updateActiveCodeSample() {
    codeSamples.forEach(function(block) {
      const isCurrentBlock = parseInt(block.dataset.index) === selectedIndex;
      toggleClass(block, 'active', isCurrentBlock);

      if (isCurrentBlock) {
        const firstTab = block.querySelector('[role="tab"]');
        activateTab(firstTab);
      }
    });
  }

  /*
  *  Initializes language tabs & panels
  */
  function initLanguageTabs() {
    tabs.forEach((tab, index) => {
      tab.index = index;
      addListeners(tab);
    });

    function addListeners(tab) {
      tab.addEventListener('click', e => activateTab(e.target));
      tab.addEventListener('keydown', keydownListener);
      tab.addEventListener('keyup', keyupListener);

      // Make the fist one selected by default
      activateTab(tabs[0]);
    }
  }

  /**
   * Key down on language tabs/buttons
   * @param {KeyboardEvent} event
   */
  function keydownListener(event) {
    switch (event.keyCode) {
      case keys.end:
        event.preventDefault();
        // Activate last tab
        activateTab(tabs[tabs.length - 1]);
        break;
      case keys.home:
        event.preventDefault();
        // Activate first tab
        activateTab(tabs[0]);
        break;
    }
  }

  /**
   * Key up on language tabs/buttons
   * @param {KeyboardEvent} event
   */
  function keyupListener(event) {
    switch (event.keyCode) {
      case keys.left:
      case keys.right:
        switchTab(event.keyCode);
        break;
    }
  }

  /**
   * Rotates through tabs/buttons
   * @param {number} keyCode
   */
  function switchTab(keyCode) {
    tabs.forEach(tab => {
      tab.addEventListener('focus', () => activateTab(tab));
    });

    if (direction[keyCode]) {
      const target = event.target;
      if (target.index !== undefined) {
        if (tabs[target.index + direction[keyCode]]) {
          tabs[target.index + direction[keyCode]].focus();
        } else if (keyCode === keys.left) {
          tabs[tabs.length - 1].focus();
        } else if (keyCode === keys.right) {
          tabs[0].focus();
        }
      }
    }
  }

  /**
   * Deactivate all tabs and tab panels
   */
  function deactivateTabs() {
    tabs.forEach(tab => {
      tab.setAttribute('aria-selected', 'false');
    });
    panels.forEach(panel => {
      panel.setAttribute('hidden', 'hidden');
    });
  }

  /**
   * Activates given tab
   * @param {HTMLElement} tab
   */
  function activateTab(tab) {
    deactivateTabs();
    tab.setAttribute('aria-selected', 'true');

    // Show respective tab's panel
    const id = tab.getAttribute('aria-controls');
    document.getElementById(id).removeAttribute('hidden');
  }
  initLanguageTabs();
})();  prettyPrint();
</script>

  </div>
  
  
</body></html>